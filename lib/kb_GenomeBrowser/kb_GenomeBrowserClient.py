# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class kb_GenomeBrowser(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def browse_genome_app(self, params, context=None):
        """
        Creates a genome browser from the given genome reference. It extracts the reference sequence from the genome
        for one track and uses the genome's feature annotations for the second track. The compiled browser
        is stored in the workspace with name result_workspace_name.
        TODO:
        Add option for BAM alignment file(s).
        Add option for other annotation tracks.
        :param params: instance of type "BrowseGenomeParams" -> structure:
           parameter "genome_ref" of String, parameter
           "result_workspace_name" of String, parameter "alignment_refs" of
           list of String
        :returns: instance of type "BrowseGenomeResults" -> structure:
           parameter "report_name" of String, parameter "report_ref" of
           String, parameter "genome_ref" of String
        """
        return self._client.call_method(
            'kb_GenomeBrowser.browse_genome_app',
            [params], self._service_ver, context)

    def build_genome_browser(self, params, context=None):
        """
        This saves the genome browser as a report... or maybe it should just return a path to the created directory?
        :param params: instance of type "BuildGenomeBrowserParams" (Note that
           for the list of AlignmentFileInputs, this should be either a list
           of bam files OR a list of alignment references. NOT BOTH. At
           least, not in this version.) -> structure: parameter
           "genome_input" of type "GenomeFileInput" (Should have either a
           genome_ref or BOTH the gff_file and fasta_file paths.) ->
           structure: parameter "gff_file" of String, parameter "fasta_file"
           of String, parameter "genome_ref" of String, parameter
           "alignment_inputs" of list of type "AlignmentFileInput" (Should
           have ONE of bam_file (a local file) or alignment_ref (an object
           reference).) -> structure: parameter "bam_file" of String,
           parameter "alignment_ref" of String, parameter
           "result_workspace_id" of Long, parameter "genome_browser_name" of
           String
        :returns: instance of type "BuildGenomeBrowserResults" -> structure:
           parameter "genome_browser_name" of String, parameter
           "genome_browser_ref" of String
        """
        return self._client.call_method(
            'kb_GenomeBrowser.build_genome_browser',
            [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('kb_GenomeBrowser.status',
                                        [], self._service_ver, context)
